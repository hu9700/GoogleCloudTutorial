https://swagger.io/docs/specification/basic-structure/

************************
Metadata:
************************
    openapi: 3.0.0
        The OpenAPI version defines the overall structure of an API definition 
    info
        title is your API name
        description is extended information about your API.
        version is an arbitrary string that specifies the version of your API 
        
************************
Servers:
************************
    The servers section specifies the API server and base URL. You can define one or several servers, such as production and sandbox.
    url: http://api.example.com/v1
    url: http://staging-api.example.com
        /users means 
            http://api.example.com/v1/users 
            or http://staging-api.example.com/users, 
            depending on the server used.
            
************************
Paths
************************
    The paths section defines individual endpoints (paths) in your API, 
    and the HTTP methods (operations) supported by these endpoints.            
    
    For example, GET /users can be described as:
        paths:
          /users:
            get:
              summary: Returns a list of users.
              description: Optional extended description in CommonMark or HTML
              responses:
                '200':
                  description: A JSON array of user names
                  content:
                    application/json:
                      schema: 
                        type: array
                        items: 
                          type: string    
************************                          
Parameters
************************
    Operations can have parameters passed via URL path (/users/{userId}), 
    query string (/users?role=admin), 
    headers (X-CustomHeader: Value) 
    or cookies (Cookie: debug=0). 
    
    You can define the parameter data types, 
    format, 
    whether they are required or optional, 
    and other details:
    
        paths:
          /users/{userId}:
            get:
              summary: Returns a user by ID.
              parameters:
                - name: userId
                  in: path
                  required: true
                  description: Parameter description in CommonMark or HTML.
                  schema:
                    type : integer
                    format: int64
                    minimum: 1
              responses: 
                '200':
                  description: OK    
                  
************************                  
Request Body
************************
    If an operation sends a request body, 
    use the requestBody keyword to describe the body content and media type.
    
    paths:
      /users:
        post:
          summary: Creates a user.
          requestBody:
            required: true
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    username:
                      type: string
          responses: 
            '201':
              description: Created    
              
************************              
Responses
************************
    For each operation, you can define possible status codes, 
    such as 200 OK or 404 Not Found, and the response body schema. 
    
    Schemas can be defined inline or referenced via $ref. 
    You can also provide example responses for different content types:
    
    paths:
      /users/{userId}:
        get:
          summary: Returns a user by ID.
          parameters:
            - name: userId
              in: path
              required: true
              description: The ID of the user to return.
              schema:
                type: integer
                format: int64
                minimum: 1
          responses:
            '200':
              description: A user object.
              content:
                application/json:
                  schema:
                    type: object
                    properties:
                      id:
                        type: integer
                        format: int64
                        example: 4
                      name:
                        type: string
                        example: Jessica Smith
            '400':
              description: The specified user ID is invalid (not a number).
            '404':
              description: A user with the specified ID was not found.
            default:
              description: Unexpected error
              
************************              
Input and Output Models
************************
    The global components/schemas section lets you 
    define common data structures used in your API. 
    
    They can be referenced via $ref whenever a schema is required 
    â€“ in parameters, request bodies, and response bodies. 
    
    For example, this JSON object:
        {
          "id": 4,
          "name": "Arthur Dent"
        }    
        
    can be represented as:      
        components:
          schemas:
            User:
              type: object
              properties:
                id:
                  type: integer
                  example: 4
                name:
                  type: string
                  example: Arthur Dent
              # Both properties are required
              required:  
                - id
                - name      
                
    and then referenced in the request body schema and response body schema as follows:
        paths:
          /users/{userId}:
            get:
              summary: Returns a user by ID.
              parameters:
                - in: path
                  name: userId
                  required: true
                  schema:
                    type: integer
                    format: int64
                    minimum: 1
              responses:
                '200':
                  description: OK
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/User'    # <-------
          /users:
            post:
              summary: Creates a new user.
              requestBody:
                required: true
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/User'      # <-------
              responses:
                '201':
                  description: Created    
